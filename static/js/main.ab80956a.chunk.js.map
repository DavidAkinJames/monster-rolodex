{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","res","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iUAIaA,EAAO,SAACC,GAAD,OAClB,sBAAKC,UAAU,iBAAf,UACC,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,eACrB,mCAAOL,EAAMI,QAAQE,KAArB,OACA,4BACIN,EAAMI,QAAQG,YCJTC,EAAW,SAACR,GAAD,OACrB,qBAAKC,UAAU,YAAf,SACCD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OAE1B,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCJTM,G,YAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACxB,uBACAZ,UAAU,SACVa,KAAK,SACLF,YAAeA,EACfG,SAAYF,MCwCCG,E,kDA5CZ,aAAgB,IAAD,8BACb,gBAeHH,aAAe,SAAAI,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAdlC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IALJ,E,qDAUf,WAAqB,IAAD,OAClBI,MAAM,8CACNC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAET,SAAUkB,S,oBAO3C,WAAU,IAAD,EAE2BC,KAAKN,MAA/Bb,EAFD,EAECA,SAAUU,EAFX,EAEWA,YACZU,EAAmBpB,EAASqB,QAAQ,SAAA1B,GAAO,OAC9CA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBAEnD,OACG,sBAAK9B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CACCW,YAAY,kBACZC,aAAee,KAAKf,eAEpB,cAAC,EAAD,CAAUJ,SAAWoB,W,GAlCbI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ab80956a.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css';\n\n\nexport const Card = (props) => (\n  <div className='card-container'>\n   <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2`}  />\n    <h2> { props.monster.name } </h2>\n    <p>\n      { props.monster.email }\n    </p>\n  </div>\n);   \n\n\n","import React from 'react';\nimport './card-list.styles.css';\nimport { Card } from '../card/card.component';\n\n\nexport const CardList = (props) => (\n   <div className='card-list'>  \n   {props.monsters.map(monster => (\n \n    <Card key={monster.id} monster={monster}/> \n    ))}\n    </div>\n);\n\n   ","import React  from 'react';\n\nimport './search-box.styles.css';\n\n\n export const SearchBox = ({ placeholder, handleChange }) => (\n  <input\n  className='search'\n  type='search'\n  placeholder= { placeholder }\n  onChange= { handleChange }\n />\n\n)","import React, { Component } from 'react';\nimport { CardList } from './components/card-list/card-list';\nimport './App.css';\nimport { SearchBox } from './components/search-box/search-box.component';\n\nclass App extends Component {\n   constructor () {\n     super () \n     \n       this.state = {\n         monsters: [],\n         searchField: ''\n     };\n\n   }\n\n   componentDidMount() {\n     fetch('https://jsonplaceholder.typicode.com/users')\n    .then(res => res.json())\n    .then(users => this.setState({ monsters: users }));\n   } \n\n  handleChange = e => {\n   this.setState({ searchField: e.target.value})\n  };\n\n  render() {\n\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter( monster => \n       monster.name.toLowerCase().includes(searchField.toLowerCase())\n      )\n    return (\n       <div className='App'>\n         <h1> Monster Rolodex</h1>\n         <SearchBox\n          placeholder='search monsters'\n          handleChange= {this.handleChange}\n         />\n          <CardList monsters={ filteredMonsters }>  \n          </CardList>   \n       </div>\n    )   \n  }\n}\n\n\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}